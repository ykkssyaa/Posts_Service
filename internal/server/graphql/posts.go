package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"errors"
	"fmt"

	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/ykkssyaa/Posts_Service/graph"
	"github.com/ykkssyaa/Posts_Service/internal/models"
	re "github.com/ykkssyaa/Posts_Service/pkg/responce_errors"
)

// CreatePost is the resolver for the CreatePost field.
func (r *mutationResolver) CreatePost(ctx context.Context, post models.InputPost) (*models.PostGraph, error) {
	newPost, err := r.Posts.CreatePost(post.FromInput())
	if err != nil {
		var rErr re.ResponseError
		if errors.As(err, &rErr) {
			return nil, &gqlerror.Error{
				Extensions: rErr.Extensions(),
			}
		}
	}

	return newPost.ToGraph(), nil
}

// Comments is the resolver for the comments field.
func (r *postResolver) Comments(ctx context.Context, obj *models.Post) ([]*models.Comment, error) {
	panic(fmt.Errorf("not implemented: Comments - comments"))
}

// GetAllPosts is the resolver for the GetAllPosts field.
func (r *queryResolver) GetAllPosts(ctx context.Context, page *int, pageSize *int) ([]*models.PostGraph, error) {
	posts, err := r.Posts.GetAllPosts(page, pageSize)
	if err != nil {
		var rErr re.ResponseError
		if errors.As(err, &rErr) {
			return nil, &gqlerror.Error{
				Extensions: rErr.Extensions(),
			}
		}
	}

	return models.ToPostGraph(posts), nil
}

// GetPostByID is the resolver for the GetPostById field.
func (r *queryResolver) GetPostByID(ctx context.Context, id *int) (*models.Post, error) {
	panic(fmt.Errorf("not implemented: GetPostByID - GetPostById"))
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Post returns graph.PostResolver implementation.
func (r *Resolver) Post() graph.PostResolver { return &postResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type postResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
